#include "main.h"
#include <string.h>
#include <stdio.h>
#include <ctype.h>

// Оголошення глобальних змінних
UART_HandleTypeDef huart2; // Дескриптор UART2
TIM_HandleTypeDef htim2;   // Дескриптор таймера TIM2

// Автомат станів
typedef enum {
    STATE_IDLE,          // Очікування подій
    STATE_UART_COMMAND,  // Обробка команди UART
    STATE_BUTTON_PRESS   // Обробка натискання кнопки
} State;

State currentState = STATE_IDLE; // Початковий стан

// Прапорці
volatile uint8_t uartCommandReceived = 0; // Прапорець: команда UART отримана
volatile uint8_t buttonPressed = 0;       // Прапорець: кнопка натиснута

// Програмні змінні
volatile uint8_t brightness = 50; // Поточна яскравість (50%)
volatile uint8_t ledState = 1;    // Стан світлодіода (1 - увімкнено, 0 - вимкнено)

// Буфер для UART
uint8_t buffer[100];  // Буфер для прийому команд UART
uint16_t bufferIndex = 0; // Поточний індекс буфера

// Прототипи функцій
void SystemClock_Config(void);
void MX_GPIO_Init(void);
void MX_USART2_UART_Init(void);
void MX_TIM2_Init(void);
void Error_Handler(void);
void ProcessUartCommand(uint8_t *buffer);

// Обробка переривання від кнопки B1
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
    if (GPIO_Pin == GPIO_PIN_13) { // Якщо натиснуто кнопку B1
        buttonPressed = 1;        // Встановлюємо прапорець кнопки
    }
}

int main(void) {
    // Ініціалізація системи
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_USART2_UART_Init();
    MX_TIM2_Init();

    // Запуск PWM
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightness * 10);

    // Привітальне повідомлення
    char welcomeMessage[] = "Brightness control is active\r\n";
    HAL_UART_Transmit(&huart2, (uint8_t *)welcomeMessage, strlen(welcomeMessage), HAL_MAX_DELAY);

    while (1) {
        switch (currentState) {
            case STATE_IDLE:
                // Перевірка прапорця кнопки
                if (buttonPressed) {
                    currentState = STATE_BUTTON_PRESS; // Перехід до стану обробки кнопки
                }
                // Перевірка прапорця UART
                if (uartCommandReceived) {
                    currentState = STATE_UART_COMMAND; // Перехід до стану обробки команди
                }
                break;

            case STATE_UART_COMMAND:
                // Обробка команди UART
                ProcessUartCommand(buffer);

                // Очищення буфера після обробки
                memset(buffer, 0, sizeof(buffer));
                bufferIndex = 0;
                uartCommandReceived = 0; // Скидаємо прапорець

                currentState = STATE_IDLE; // Повернення до стану очікування
                break;

            case STATE_BUTTON_PRESS:
                // Зміна стану світлодіода
                ledState = !ledState;
                if (ledState) {
                    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightness * 10);
                } else {
                    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
                }

                // Скидаємо прапорець кнопки
                buttonPressed = 0;
                currentState = STATE_IDLE; // Повернення до стану очікування
                break;

            default:
                currentState = STATE_IDLE;
                break;
        }

        // Прийом даних через UART
        uint8_t data;
        if (HAL_UART_Receive(&huart2, &data, 1, 10) == HAL_OK) {
            if (data == '\n' || data == '\r') { // Кінець команди
                buffer[bufferIndex] = '\0';    // Завершуємо рядок
                uartCommandReceived = 1;      // Встановлюємо прапорець
            } else {
                if (bufferIndex < sizeof(buffer) - 1) {
                    buffer[bufferIndex++] = data; // Додаємо символ у буфер
                } else {
                    bufferIndex = 0; // Скидаємо буфер у разі переповнення
                }
            }
        }
    }
}

// Обробка команди UART
void ProcessUartCommand(uint8_t *buffer) {
    if (tolower(buffer[0]) == 'l' && buffer[1] == '=') {
        int new_brightness = -1;
        if (sscanf((char *)&buffer[2], "%d", &new_brightness) == 1 && new_brightness >= 0 && new_brightness <= 99) {
            brightness = new_brightness; // Оновлення яскравості
            if (ledState) {
                __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightness * 10);
            }
            char response[50];
            snprintf(response, sizeof(response), "Brightness set to %d\r\n", brightness);
            HAL_UART_Transmit(&huart2, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
        } else {
            char errorResponse[] = "Error: Invalid value\r\n";
            HAL_UART_Transmit(&huart2, (uint8_t *)errorResponse, strlen(errorResponse), HAL_MAX_DELAY);
        }
    } else {
        char errorResponse[] = "Error: Invalid command\r\n";
        HAL_UART_Transmit(&huart2, (uint8_t *)errorResponse, strlen(errorResponse), HAL_MAX_DELAY);
    }
}

void MX_USART2_UART_Init(void) {
    huart2.Instance = USART2;
    huart2.Init.BaudRate = 9600;
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
    huart2.Init.StopBits = UART_STOPBITS_1;
    huart2.Init.Parity = UART_PARITY_NONE;
    huart2.Init.Mode = UART_MODE_TX_RX;
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
    if (HAL_UART_Init(&huart2) != HAL_OK) {
        Error_Handler();
    }
}

void MX_TIM2_Init(void) {
    TIM_OC_InitTypeDef sConfigOC = {0};
    htim2.Instance = TIM2;
    htim2.Init.Prescaler = 84 - 1;
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim2.Init.Period = 999;
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;

    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
        Error_Handler();
    }

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
    sConfigOC.Pulse = 0;
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;

    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
        Error_Handler();
    }
}

void MX_GPIO_Init(void) {
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOC_CLK_ENABLE();

    // Конфігурація PA5 для PWM
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    // Конфігурація PC13 як кнопки B1
    GPIO_InitStruct.Pin = GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}

void SystemClock_Config(void) {
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLM = 16;
    RCC_OscInitStruct.PLL.PLLN = 336;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
    RCC_OscInitStruct.PLL.PLLQ = 7;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
        Error_Handler();
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
        Error_Handler();
    }
}

void Error_Handler(void) {
    __disable_irq();
    while (1) {
    }
}
